create database dirkasst4p2;

\c dirkasst4p2;


-- problem 15


CREATE TABLE STUDENT (SID INT, SNAME TEXT NOT NULL, 
					 PRIMARY KEY (SID)
					);

CREATE TABLE COURSE (CNO INT, TOTAL INT DEFAULT 0, MAX INT NOT NULL, 
					 PRIMARY KEY (CNO)
					);
					
 
CREATE TABLE PREREQUISITE (CNO INT, PREREQ INT,
							FOREIGN KEY (CNO) REFERENCES COURSE (CNO),
							FOREIGN KEY (PREREQ) REFERENCES COURSE (CNO)
);

CREATE TABLE HASTAKEN (SID INT, CNO INT,
					   PRIMARY KEY (SID, CNO), 
					   FOREIGN KEY (SID) REFERENCES STUDENT (SID),
				   FOREIGN KEY (CNO) REFERENCES COURSE (CNO)
				   );



CREATE TABLE ENROLL (SID INT, CNO INT,
				   PRIMARY KEY (SID, CNO), 
				   FOREIGN KEY (SID) REFERENCES STUDENT (SID),
				   FOREIGN KEY (CNO) REFERENCES COURSE (CNO)
				   );
				   
CREATE TABLE WAITLIST (SID INT, CNO INT, POSITION INT NOT NULL,
					   PRIMARY KEY (SID, CNO), 
					   FOREIGN KEY (SID) REFERENCES STUDENT (SID),
				   FOREIGN KEY (CNO) REFERENCES COURSE (CNO)
					   );

-- INSERTS
INSERT INTO COURSE VALUES (100, 0, 5), (200, 0, 4), (300, 0, 3), (400, 0, 2), (500, 0, 1);
INSERT INTO STUDENT VALUES (1, 'A'), (2, 'B'), (3,'C'), (4, 'D'), (5, 'E');
INSERT INTO PREREQUISITE VALUES (400, 300), (400, 200), (500, 400), (500, 300);
INSERT INTO HASTAKEN VALUES (2,200), (2,300),(3, 100), (3, 200), (4,200), (4,300);

--1

--DELETE
CREATE OR REPLACE FUNCTION DEL_COURSE() RETURNS TRIGGER AS
$$ 
BEGIN 
IF OLD.CNO IN (SELECT CNO FROM COURSE)
THEN 
RAISE EXCEPTION 'DELETION ON COURSE NOT ALLOWED';
END IF;
RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE  TRIGGER DELETE_ON_COURSE
BEFORE DELETE ON COURSE
FOR EACH ROW
EXECUTE PROCEDURE DEL_COURSE();

--INSERT
CREATE OR REPLACE FUNCTION INSERT_COURSE() RETURNS TRIGGER AS
$$ 
BEGIN 
IF NEW.CNO NOT IN (SELECT CNO FROM COURSE)
THEN 
RAISE EXCEPTION 'INSERTION ON COURSE NOT ALLOWED';
END IF;
RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE  TRIGGER INSERT_ON_COURSE
BEFORE INSERT ON COURSE
FOR EACH ROW
EXECUTE PROCEDURE INSERT_COURSE();

-- UPDATE
CREATE OR REPLACE FUNCTION UPDATE_COURSE() RETURNS TRIGGER AS
$$ 
BEGIN 

IF NEW.CNO IN (SELECT CNO FROM COURSE)
THEN 
	IF NEW.MAX <> OLD.MAX THEN
		RAISE EXCEPTION 'UPDATE ON COURSE.MAX NOT ALLOWED';
        RETURN NULL;
	END IF;
	IF NEW.CNO <> OLD.CNO THEN
		RAISE EXCEPTION 'UPDATE ON COURSE.MAX NOT ALLOWED';
        RETURN NULL;
	END IF;
    RETURN NEW;
END IF;

END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE TRIGGER UPDATE_ON_COURSE
BEFORE UPDATE ON COURSE
FOR EACH ROW
EXECUTE PROCEDURE UPDATE_COURSE();


-- 1 TEST CASES 
-- UPDATE  COURSE SET MAX=1 WHERE CNO=1001;
-- INSERT INTO COURSE VALUES (1002, 0, 1 );
-- DELETE FROM COURSE WHERE CNO=100;


-- 2/3






--2 
CREATE OR REPLACE FUNCTION UPDATE_COURSE() RETURNS TRIGGER AS
$$ 
BEGIN 

IF NEW.CNO IN (SELECT CNO FROM COURSE)
THEN 
	IF NEW.MAX <> OLD.MAX THEN
		RAISE EXCEPTION 'UPDATE ON COURSE.MAX NOT ALLOWED';
        RETURN NULL;
	END IF;
	IF NEW.CNO <> OLD.CNO THEN
		RAISE EXCEPTION 'UPDATE ON COURSE.MAX NOT ALLOWED';
        RETURN NULL;
	END IF;
    RETURN NEW;
END IF;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION ENROLLSTUDENT() RETURNS TRIGGER
AS
$$
BEGIN
IF EXISTS (SELECT  P.PREREQ FROM PREREQUISITE P
		  WHERE P.CNO=NEW.CNO
		  EXCEPT
		  SELECT H.CNO FROM HASTAKEN H 
--  		   JOIN PREREQUISITE P
--  		  ON
 		   WHERE
--   		   H.CNO = P.CNO  
--  		    H.CNO=NEW.CNO
 		    H.SID=NEW.SID
		  )
		   THEN
    RAISE EXCEPTION 'PREREQUISITES NOT MET';
RETURN NULL;
ELSE 
	IF 
		(SELECT C.MAX>C.TOTAL FROM COURSE C WHERE C.CNO=NEW.CNO) THEN 
-- 		RAISE EXCEPTION 'N1';
		BEGIN
		UPDATE COURSE  SET TOTAL=TOTAL+1 WHERE CNO=NEW.CNO ;
		END;
			 RETURN NEW;
	ELSEIF 
		  (SELECT C.MAX=C.TOTAL FROM COURSE C WHERE C.CNO=NEW.CNO) THEN 
		  INSERT INTO WAITLIST VALUES(NEW.SID,NEW.CNO,(
				SELECT COUNT(W.SID)+1 FROM WAITLIST W RIGHT JOIN COURSE C ON W.CNO=C.CNO
				 
				GROUP BY C.CNO HAVING C.CNO = NEW.CNO

		  ));
		  RETURN NULL;

	END IF;

END IF;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE  TRIGGER ENROLL_STUDENT_BEFORE
BEFORE INSERT ON ENROLL
FOR EACH ROW
EXECUTE PROCEDURE ENROLLSTUDENT();



CREATE OR REPLACE FUNCTION REMOVE_ENROLLMENT() RETURNS TRIGGER AS
$$
declare del_id integer;
declare DEL_CNO INTEGER;

BEGIN

IF EXISTS (SELECT 1 FROM WAITLIST W WHERE W.CNO=OLD.CNO) THEN
	DEL_CNO = OLD.CNO;
	del_id = (SELECT  W.SID FROM  WAITLIST W WHERE W.CNO= OLD.CNO AND W.POSITION=1);
	DELETE FROM WAITLIST W WHERE W.CNO=OLD.CNO AND W.POSITION=1;
	UPDATE WAITLIST W SET POSITION = POSITION-1 WHERE CNO=OLD.CNO;
	INSERT INTO ENROLL VALUES (
		DEL_ID
		,del_cno);

ELSE
	UPDATE COURSE SET TOTAL = TOTAL - 1 WHERE CNO=NEW.CNO;

END IF;
RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE TRIGGER T_REMOVE_ENROLLMENT
BEFORE DELETE ON ENROLL
FOR EACH ROW
EXECUTE PROCEDURE REMOVE_ENROLLMENT();

--   select * from waitlist;
--   delete from enroll where sid=4;
--  select * from ENROLL;
-- select * from prerequisite;



